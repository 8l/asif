%load "CPS";

%decl Id2Id : U =
  [(Pi a:*. a -> a) -> (Pi a:*. a -> a)];
  
%decl selfApplyId : Exp Id2Id =
  [\x:(Pi a:*. a -> a). x (Pi a:*. a -> a) x];

-- STEP 1: express (cps Id2Id selfApplyId) using
--         cps' fold functions cpsAbs, cpsApp, and
--         cpsTApp         

%decl expected : CPS Id2Id =
  cpsAbs (CPS1 [Pi a:*. a -> a]) (CPS1 [Pi a:*. a -> a])
    (\x : CPS [Pi a:*. a -> a].
     cpsApp (CPS1 [Pi a:*. a -> a]) (CPS1 [Pi a:*. a -> a])
       (cpsTApp (CPS1 [Pi a:*. a -> a]) x
	 (CPS1 [(Pi a:*. a -> a) -> (Pi a:*. a -> a)])
	 (\y : CPS1 [Pi a:*. a -> a]. y (CPS1 [Pi a:*. a -> a])))
       x);

\f : CPS Id2Id -> CPS Id2Id -> CPS Id2Id.
f (cps Id2Id selfApplyId) expected
